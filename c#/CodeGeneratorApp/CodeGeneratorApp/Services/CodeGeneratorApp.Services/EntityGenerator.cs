// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;
#pragma warning restore 0105

namespace CodeGeneratorApp.Services
{
    internal static partial class RawEntityGenerator
    {
        public const string NativeLib = @"C:\Users\Administrator\Desktop\code_generator_rs\target\debug\csharp_binding.dll";

        static RawEntityGenerator()
        {
        }


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_destroy")]
        public static extern AppFFIError EntityServiceDestroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static void EntityServiceDestroy_checked(ref IntPtr context)
        {
            var rval = EntityServiceDestroy(ref context); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_new")]
        public static extern AppFFIError EntityServiceNew(ref IntPtr context, string path);

        public static void EntityServiceNew_checked(ref IntPtr context, string path)
        {
            var rval = EntityServiceNew(ref context, path); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_dto")]
        public static extern AppFFIError EntityServiceCreateDto(IntPtr context, string dir);

        public static void EntityServiceCreateDto_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreateDto(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_add_and_modify_dto")]
        public static extern AppFFIError EntityServiceCreateAddAndModifyDto(IntPtr context, string dir);

        public static void EntityServiceCreateAddAndModifyDto_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreateAddAndModifyDto(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_ef_repository")]
        public static extern AppFFIError EntityServiceCreateEfRepository(IntPtr context, string dir);

        public static void EntityServiceCreateEfRepository_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreateEfRepository(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_exception")]
        public static extern AppFFIError EntityServiceCreateException(IntPtr context, string exception_name, string dir);

        public static void EntityServiceCreateException_checked(IntPtr context, string exception_name, string dir)
        {
            var rval = EntityServiceCreateException(context, exception_name, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_iservice")]
        public static extern AppFFIError EntityServiceCreateIservice(IntPtr context, bool custom, string dir);

        public static void EntityServiceCreateIservice_checked(IntPtr context, bool custom, string dir)
        {
            var rval = EntityServiceCreateIservice(context, custom, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_manager")]
        public static extern AppFFIError EntityServiceCreateManager(IntPtr context, string dir);

        public static void EntityServiceCreateManager_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreateManager(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_pagedandsortedandfilterresultdto")]
        public static extern AppFFIError EntityServiceCreatePagedandsortedandfilterresultdto(IntPtr context, string dir);

        public static void EntityServiceCreatePagedandsortedandfilterresultdto_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreatePagedandsortedandfilterresultdto(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_repository_interface")]
        public static extern AppFFIError EntityServiceCreateRepositoryInterface(IntPtr context, string dir);

        public static void EntityServiceCreateRepositoryInterface_checked(IntPtr context, string dir)
        {
            var rval = EntityServiceCreateRepositoryInterface(context, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_create_service")]
        public static extern AppFFIError EntityServiceCreateService(IntPtr context, bool custom, string dir);

        public static void EntityServiceCreateService_checked(IntPtr context, bool custom, string dir)
        {
            var rval = EntityServiceCreateService(context, custom, dir); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_insert_mapper")]
        public static extern AppFFIError EntityServiceInsertMapper(IntPtr context, string file_path);

        public static void EntityServiceInsertMapper_checked(IntPtr context, string file_path)
        {
            var rval = EntityServiceInsertMapper(context, file_path); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_insert_efcore_entity_config")]
        public static extern AppFFIError EntityServiceInsertEfcoreEntityConfig(IntPtr context, string file_path);

        public static void EntityServiceInsertEfcoreEntityConfig_checked(IntPtr context, string file_path)
        {
            var rval = EntityServiceInsertEfcoreEntityConfig(context, file_path); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "entity_service_format_all")]
        public static extern AppFFIError EntityServiceFormatAll(IntPtr context);

        public static void EntityServiceFormatAll_checked(IntPtr context)
        {
            var rval = EntityServiceFormatAll(context); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

    }



    internal partial class EntityGenerator : IDisposable
    {
        private IntPtr _context;

        private EntityGenerator() { }

        public static EntityGenerator New(string path)
        {
            var self = new EntityGenerator();
            var rval = RawEntityGenerator.EntityServiceNew(ref self._context, path);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = RawEntityGenerator.EntityServiceDestroy(ref _context);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateDto(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateDto(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateAddAndModifyDto(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateAddAndModifyDto(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateEfRepository(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateEfRepository(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateException(string exception_name, string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateException(_context, exception_name, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateIservice(bool custom, string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateIservice(_context, custom, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateManager(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateManager(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreatePagedandsortedandfilterresultdto(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreatePagedandsortedandfilterresultdto(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateRepositoryInterface(string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateRepositoryInterface(_context, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateService(bool custom, string dir)
        {
            var rval = RawEntityGenerator.EntityServiceCreateService(_context, custom, dir);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void InsertMapper(string file_path)
        {
            var rval = RawEntityGenerator.EntityServiceInsertMapper(_context, file_path);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void InsertEfcoreEntityConfig(string file_path)
        {
            var rval = RawEntityGenerator.EntityServiceInsertEfcoreEntityConfig(_context, file_path);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void FormatAll()
        {
            var rval = RawEntityGenerator.EntityServiceFormatAll(_context);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }





}
