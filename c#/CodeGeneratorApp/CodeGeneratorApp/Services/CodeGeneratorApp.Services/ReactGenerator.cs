// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;
#pragma warning restore 0105

namespace CodeGeneratorApp.Services
{
    public static partial class Interop
    {
        public const string NativeLib = "C:\\Users\\Administrator\\Desktop\\code_generator_rs\\target\\debug\\csharp_binding.dll";

        static Interop()
        {
        }


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_destroy")]
        public static extern AppFFIError react_service_destroy(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        public static void react_service_destroy_checked(ref IntPtr context)
        {
            var rval = react_service_destroy(ref context); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_new")]
        public static extern AppFFIError react_service_new(ref IntPtr context, string path);

        public static void react_service_new_checked(ref IntPtr context, string path)
        {
            var rval = react_service_new(ref context, path); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_create_api")]
        public static extern AppFFIError react_service_create_api(IntPtr context, string url_prefix);

        public static void react_service_create_api_checked(IntPtr context, string url_prefix)
        {
            var rval = react_service_create_api(context, url_prefix); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_create_store")]
        public static extern AppFFIError react_service_create_store(IntPtr context);

        public static void react_service_create_store_checked(IntPtr context)
        {
            var rval = react_service_create_store(context); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_create_page")]
        public static extern AppFFIError react_service_create_page(IntPtr context);

        public static void react_service_create_page_checked(IntPtr context)
        {
            var rval = react_service_create_page(context); ;
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "react_service_format_all")]
        public static extern void react_service_format_all(IntPtr context);

    }

    public partial class ReactGenerator : IDisposable
    {
        private IntPtr _context;

        private ReactGenerator() { }

        public static ReactGenerator New(string path)
        {
            var self = new ReactGenerator();
            var rval = Interop.react_service_new(ref self._context, path);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.react_service_destroy(ref _context);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateApi(string url_prefix)
        {
            var rval = Interop.react_service_create_api(_context, url_prefix);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreateStore()
        {
            var rval = Interop.react_service_create_store(_context);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void CreatePage()
        {
            var rval = Interop.react_service_create_page(_context);
            if (rval != AppFFIError.Ok)
            {
                throw new InteropException<AppFFIError>(rval);
            }
        }

        public void FormatAll()
        {
            Interop.react_service_format_all(_context);
        }

        public IntPtr Context => _context;
    }
}
